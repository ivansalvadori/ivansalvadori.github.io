#+TITLE: Integração de aplicações entre servidores e dispositivos móveis
#+AUTHOR: Ivan Salvadori
#+EMAIL: Your email address
#+DATE: <2020-06-04 qui>
#+DESCRIPTION: Article

#+INFOJS_OPT: path:../../HtmlTemplate/ccReport.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../HtmlTemplate/ccReport.css" />

#+TODO: TODO(t) STARTED(s) WAITING(w) | DONE(d) CANCELED(c)
 


* Introdução
Este artigo apresenta as principais formas de integração entre servidores e aplicações executadas dispositivos móveis. 
Primeiramente, é fundamental definir alguns conceitos básicos bem como especificar a motivação para integração neste cenário.


* Conceitos básicos 
O primeiro conceito a ser definido é o de servidor.
A primeira vista, servidor pode ser entendido como sendo um recurso computacional destinado a execução de uma aplicação ou uma coleção de aplicações.
No contexto de integração, é mais adequado definir o termo servidor como recurso de software ao invéz de recurso computacional ou hardware propriamente dito.
Exemplos de servidores neste contexto podem ser: servidores de banco de dados, servidores de aplicações, servidores de arquivo, servidores de email, dentre outros.
Todos estes exemplos possuem em comum uma camada de software responsável em realizar uma determinada tarefa específica.
O termo servidor traz consigo a ideia de acessibilidade.
Esta ideia refere-se à capacidade de elementos externos comunicarem-se com as aplicações disponibilizadas pelos servidores.
De forma geral, pode-se caracterizar os elementos externos como aplicações.
Tem-se então, um cenário onde aplicações comunicam-se entre sí para alcançar os seus objetivos desejados.
A este processo de comunicação entre aplicações dá-se o nome de integração de aplicações.

Diversas são as justificativas para integrar aplicações.
Manter o software o mais coeso possível é um dos grandes motivadores para integração de aplicações.
Uma aplicação é desenvolvida para executar um conjunto específico de funcionalidades a respeito de um determinado domínio.
Dessa forma, é essencial isolar a aplicação de outras funcionalidades que não estão diretamente relacionadas com o domínio, mas que são necessárias para sua correta execução.
Funcionalidades não relacionadas com o domínio da aplicação podem representar requisitos não funcionais, como por exemplo: envio de email, controle de acesso e segurança, persistência de dados, entre outros.
Para essas funcionalidades, a aplicação pode estabelecer uma integração com servidores capazes de executar essas atividades.
A reutilização de funcionalidades é outra justificativa para a integração de aplicações.
Uma determinada aplicação pode reutilizar funcionalidades previamente implementadas por outras aplicações.
Além disso, a simples necessidade de disponibilizar serviços ou dados para parceiros exige a adoção de abordagens de integração de aplicações.

As justificativas anteriormente citadas se aplicam a qualquer tipo de aplicação, seja a aplicação desenvolvida para ser executada em um dispositivo móvel ou não.
Entretanto, aplicações para dispositivos móveis possuem características específicas que motivam ainda  mais a realização de integração com servidores.
Embora os dispositivos móveis atuais possuírem recursos computacionais avançados, como por exemplo: processador, memória e capacidade de armazenamento, ainda assim apresentam limitações.
Muitas técnicas de desenvolvimento de interfaces adaptativas são utilizadas para oferecer uma melhor experiência ao usuário.
Entretanto, quando comparadas com computadores pessoais ou laptops, os celulares tem a desvantagem do tamanho de tela para apresentar a interface gráfica do usuário.
Por esse motivo, é comum a implementação parcial de funcionalidades em aplicações para dispositivos móveis.
Usuários desejam independência para utilizar suas aplicações.
Quando as funcionalidades de uma aplicação são disponibilizadas através de diferentes meios, os usuários podem escolher a maneira mais adequada para diferentes situações.
Aplicações desenvolvidas para computadores pessoais podem ter versões adaptadas para dispositivos móveis.
Usuários desejam compartilhar informações e colaborar com outros usuários.
Para isso, as aplicações necessitam de um suporte de servidores que agem como ponto central de armazenamento de dados.
Além disso, dispositivos móveis não necessáriamente são celulares ou tablets.
Aplicações podem ser executadas em uma variedade de dispositivos sensores que monitoram variáveis ambientais ou outros dispositivos.
Dispositivos sensores podem ser instalados em automóveis, aviões, e na construção das chamadas cidades inteligentes. 
Dessa forma, para superar eventuais limitações de hardware, oferecer independência de uso, permitir o compartilhamento e colaboração entre os usuários, é necessário integração de aplicações.
A integração de aplicações pode ser realizada de diversas formas, que variam especialmente quanto a forma que as funcionalidades sçaoo acessadas.
Neste texto, são consideradas as intergações realziadas através de Web Services, Web Sockets e APIs Públicas.

* Integração via Web Services
Service-Oriented Computing (SOC) is the computing paradigm that utilizes software services as fundamental elements for developing and deploying distributed software applications. Services are self-describing, platform-agnostic computational elements that support rapid, low-cost composition of distributed applications. They perform functions, which can be anything from simple requests to complicated business processes. Services allow organizations to expose their core competencies programmatically via a self-describing interface based on open standards over the Internet (or intra-net) using standard (XML-based) languages and protocols. Because services provide a uniform and ubiquitous information distributor for wide range of computing devices (such as handheld computers, PDAs, cellular telephones, or appliances) and software platforms (e.g., UNIX or
Windows), they constitute a major transition in distributed computing. A Web service is a specific kind of service that is identified by a URI that exposes its features programmatically over the Internet using standard Internet languages and protocols, and can be implemented via a self-describing interface based on open Internet standards (e.g., XML interfaces which are published in network-based repositories).
Web Service technology is undeniably the preferred delivery method for the Service-Oriented Computing (SOC) paradigm. It has evolved over the years to be a comprehensive, interdisciplinary approach to modern software development.

...processes and systems are also becoming more and more complex. We have left the stage where automation was primarily a matter of individual systems, and are fast moving toward a world where all those individual systems will become one distributed system. The challenge is maintainability.
Service-oriented architecture (SOA) is exactly what’s needed. It’s an approach that helps systems remain scalable and flexible while growing, and that also helps bridge the business/IT gap. The approach consists of three major elements:
• Services, which on the one hand represent self-contained business functionalities that
can be part of one or more processes, and on the other hand, can be implemented by
any technology on any platform.
• A specific infrastructure, called the enterprise service bus (ESB), that allows us to
combine these services in an easy and flexible manner. 
• Policies and processes that deal with the fact that large distributed systems are heterogeneous, under maintenance, and have different owners.
SOA accepts that the only way to maintain flexibility in large distributed systems is to
support heterogeneity, decentralization, and fault tolerance.

SOA is focused on business processes. These processes are performed in different steps
(also called activities or tasks) on different systems. The primary goal of a service is to represent a “natural” step of business functionality. That is, according to the domain for which it’s provided, a service should represent a self-contained functionality that corresponds to a real-world business activity.






* Integração via Web Sockets

* Integração com APIs Públicas

* Conclusão
