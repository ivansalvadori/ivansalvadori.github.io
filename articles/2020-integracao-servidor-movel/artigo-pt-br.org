#+TITLE: Integração de aplicações entre servidores e dispositivos móveis
#+AUTHOR: Ivan Salvadori
#+LANGUAGE: pt_BR
#+EMAIL: Your email address
#+DATE: 04/06/2020
#+HTML_HEAD: <meta name="docClass" content= "Artigo"> 
#+INFOJS_OPT: path:../../HtmlTemplate/ccReport.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../HtmlTemplate/ccReport.css" />


#+TODO: TODO(t) STARTED(s) WAITING(w) | DONE(d) CANCELED(c)
[[[file:artigo-en.org][English]]]  

* Introdução
Este artigo apresenta as principais formas de integração entre servidores e aplicações executadas dispositivos móveis. 
Primeiramente, é fundamental definir alguns conceitos básicos bem como especificar a motivação para integração neste cenário.
O texto apresenta duas formas de integração de aplicações: integrações síncronas e assíncronas.
São apresentados detalhes sobre  serviços web SOAP e REST para realizar a integração síncrona e Websockets, filas e tópicos para integração assíncrona.


* Conceitos básicos 
O primeiro conceito a ser definido é o de servidor.
A primeira vista, servidor pode ser entendido como um recurso computacional para execução de uma aplicação ou uma coleção de aplicações.
No contexto de integração, é mais adequado definir o termo servidor como recurso de software ao invés de recurso computacional ou hardware.
Exemplos de servidores neste contexto podem ser: servidores de banco de dados, servidores de aplicações, servidores de arquivo, servidores de email, dentre outros.
Todos estes exemplos possuem em comum uma camada de software responsável por uma determinada tarefa.
O termo servidor traz consigo a idéia de acessibilidade.
Esta idéia refere-se à capacidade de elementos externos comunicarem-se com as aplicações disponibilizadas pelos servidores.
De forma geral, pode-se caracterizar os elementos externos como aplicações.
Tem-se então, um cenário onde aplicações comunicam-se entre si para alcançar os seus objetivos desejados.
A este processo de comunicação entre aplicações dá-se o nome de integração de aplicações

Diversas são as justificativas para integrar aplicações.
Manter o software o mais coeso possível é um dos grandes motivadores para integração de aplicações.
Uma aplicação é desenvolvida para executar um conjunto específico de funcionalidades sobre um determinado domínio.
Dessa forma, é essencial isolar a aplicação de outras funcionalidades que não estão diretamente relacionadas com o domínio, mas que são necessárias para sua correta execução.
Funcionalidades não relacionadas com o domínio da aplicação podem representar requisitos não funcionais, como por exemplo: envio de email, controle de acesso e segurança, persistência de dados, entre outros.
Para essas funcionalidades, a aplicação pode estabelecer uma integração com servidores capazes de executar essas atividades.
A reutilização de funcionalidades é outra justificativa para a integração de aplicações.
Uma determinada aplicação pode reutilizar funcionalidades previamente implementadas por outras aplicações.
Além disso, a simples necessidade de disponibilizar serviços ou dados para parceiros exige a adoção de abordagens de integração de aplicações.

As justificativas anteriormente citadas se aplicam a qualquer tipo de aplicação, seja ela desenvolvida para ser executada em dispositivo móvel ou não.
Entretanto, aplicações para dispositivos móveis possuem características específicas que motivam ainda  mais a realização de integração com servidores.
Apesar de bons recursos computacionais como: processador, memória e capacidade de armazenamento, ainda assim os dispositivos móveis atuais possuem limitações.
Muitas técnicas de desenvolvimento de interfaces adaptativas são utilizadas para oferecer uma melhor experiência ao usuário.
Entretanto, quando comparadas com computadores pessoais ou laptops, os celulares tem a desvantagem do tamanho de tela para apresentar a interface gráfica do usuário.
Por esse motivo, é comum a implementação parcial de funcionalidades em aplicações para dispositivos móveis.
Usuários desejam independência para utilizar suas aplicações.
Quando as funcionalidades de uma aplicação são disponibilizadas através de diferentes meios, os usuários podem escolher a maneira mais adequada para diferentes situações.
Aplicações desenvolvidas para computadores pessoais podem ter versões adaptadas para dispositivos móveis.
Usuários desejam compartilhar informações e colaborar com outros usuários.
Para isso, as aplicações necessitam de um suporte de servidores que agem como ponto central de armazenamento de dados.

Dispositivos móveis não necessariamente são celulares ou tablets.
Aplicações podem ser executadas em uma variedade de dispositivos sensores que monitoram variáveis ambientais ou outros dispositivos.
Dispositivos sensores podem ser instalados em automóveis, aviões, e na construção das chamadas cidades inteligentes. 
Dessa forma, para superar eventuais limitações de hardware, oferecer independência de uso, permitir o compartilhamento e colaboração entre os usuários, é necessário integração de aplicações.
A integração de aplicações pode ser realizada de diversas formas, que variam especialmente quanto a forma de acesso às funcionalidades.
Neste texto, são consideradas as integrações síncronas e assíncronas.

* Integração Síncrona
Na integração síncrona, uma aplicação cliente envia uma requisição para um servidor e aguarda uma resposta acerca da funcionalidade desejada.
A idéia de sincronismo reside no fato da aplicação cliente aguardar uma resposta do servidor para continuar seu fluxo de processamento.
Uma requisição pode ter diferentes respostas.
O servidor pode recusar ou desconhecer os dados enviados pelo cliente.
Outro possível resultado pode representar erro de execução no lado servidor ou até mesmo não responder no tempo determinado pelo cliente.
Independentemente do resultado, o cliente fica aguardando até que uma resposta seja produzida.

A computação orientada a serviços é uma das formas mais utilizadas para implementar a integração síncrona entre aplicativos.
A computação orientada a serviços é um paradigma de computação que utiliza serviços de software como elementos fundamentais para o desenvolvimento e implantação de aplicativos de software distribuídos. 
Serviços são elementos computacionais independentes de plataforma que executam funções de um determinado processo de negócio.
Ou seja, de acordo com o domínio para o qual é fornecido, um serviço deve representar uma funcionalidade que corresponde a uma atividade do mundo real.
Na prática, funcionalidades são implementadas na forma de serviços web que expõem seus recursos de forma programática pela internet através de protocolos padronizados.

As abordagens mais utilizadas para implementar serviços web são SOAP e APIs Web RESTful.
SOAP é o modelo mais tradicional e utilizado por grandes organizações, além de ser um padrão recomendado pelo W3C. 
No padrão SOAP, a comunicação é realizada através do envio de um envelope de dados pelo cliente para o serviço web. 
O envelope é um documento no formato XML que carrega internamente o conteúdo da mensagem, além de elementos opcionais relacionados à infra-estrutura, segurança, roteamento, dentre outras propriedades.
Serviços SOAP são comumente utilizados para integração de aplicações corporativas.
De forma geral, este tipo de integração utiliza infra-estrutura do tipo /Enterprise Service Bus/ (ESB) para orquestrar as trocas de mensagens entre os serviços que compõem o sistema.

REST é uma coleção de princípios e restrições arquiteturais para o desenvolvimento de aplicações distribuídas na Web.
REST é uma abordagem leve para o desenvolvimento de serviços web, que busca simplicidade e baixo acoplamento.
Recursos formam a base dos serviços REST e podem ser qualquer informação a tornar-se acessível a clientes remotos
Recursos são endereçados através de um identificador único, denominado URI (/Uniform Resource Identifier/). 
Exemplos de recursos podem ser uma lista de filmes em cartaz no cinema, comentários de um blog, uma página pessoal ou um perfil de um usuário de uma rede social, por exemplo.
Uma das representações de recurso mais utilizadas em serviços web REST é o JSON. 
JSON é uma forma textual de representação de dados estruturados em uma coleção de pares no formato de chave/valor.

Um dos princípios arquiteturais REST é o estabelecimento de uma interface uniforme entre cliente e servidor. 
O uso de uma interface uniforme proporciona uma arquitetura simplificada e desacoplada. Uma das formas para estabelecer uma interface uniforme é respeitar a semântica do protocolo utilizado pelo serviço. 
O HTTP é o protocolo mais utilizados em REST, e respeitar a semântica do protocolo significa utilizar adequadamente os seus verbos e códigos de mensagens. 

Os verbos HTTP mais utilizados são:
 * GET - Obter a representação de um recurso;
 * POST - Criar um novo recurso;
 * PUT - Alterar um recurso;
 * DELETE - Remover um recurso.

Espera-se que os significados dos verbos HTTP sejam respeitados, empregando o verbo adequado para cada ação, embora muitas implementações REST negligenciem esta restrição e utilizam GET para obter, criar, alterar e remover recursos, dentre outras combinações.
Outra restrição imposta pelo REST é a correta utilização de códigos de status ou mensagens. 
Todas as requisições tratadas pelo servidor recebem um código de status, que informa ao cliente o resultado da requisição.
Requisições que resultam em sucesso devem retornar uma resposta com um dos códigos do grupo 2XX. 
Outro exemplo é quando o cliente faz uma requisição que não possui autorização, onde o código de resposta deve ser 401, indicando ao cliente que o erro é de autenticação inválida. 
Da mesma forma, quando ocorre algum erro interno do servidor, a resposta deve apresentar o erro 500. 
Os códigos de status do protocolo HTTP fornecem uma maneira adequada de categorizar e padronizar respostas das requisições, e os princípios REST pedem atenção neste aspecto.

Outra restrição arquitetural exige que as requisições contenham todas as informações necessárias para sua execução, sem recorrer a dados armazenados em sessões do usuário. Não é esperado que o servidor mantenha dados na sessão do usuário, tornando a aplicação /stateless/.
É responsabilidade da aplicação cliente manter o estado dos recursos para o usuário final, ficando o servidor com a responsabilidade de disponibilizar representações de recursos e alterar seus estados. 
O comportamento /stateless/ implica que o servidor não deve manter nenhuma informação sobre as requisições anteriormente realizadas. 
O envio de todas as informações necessárias para a execução das requisições, somado à utilização correta do protocolo utilizado pelo serviço resulta em mensagens auto descritivas, outro importante princípio arquitetural REST.

* Integração Assíncrona
O modelo de integração síncrona, anteriormente apresentado, segue o modelo cliente/servidor, onde a comunicação tem início na requisição do cliente e fim na resposta do servidor.
Dessa forma, para verificar a existência de novos dados no servidor, uma nova requisição deve ser realizada.
Em muitos casos, aplicações clientes realizam incessantes requisições ao servidor, representando um abuso do protocolo HTTP.
Sendo assim, outras formas de integração devem ser adotadas a fim de estabelecer uma comunicação bidirecional entre cliente e servidor.

A API WebSocket fornece um protocolo de comunicação full-duplex e bidirecional através de uma única conexão TCP. 
Full-duplex significa que um cliente e um servidor podem enviar mensagens independentes um dos outros. 
Além de permitir que um cliente envie uma mensagem ao servidor, a comunicação bidirecional permite que o servidor envie mensagens aos clientes quando julgar necessário.
A API WebSocket muda a forma como os servidores web lidam com as requisições de seus clientes, pois ao invés de encerrar a conexão, o servidor mantém o canal de comunicação aberto para que mensagens sejam trocadas.

Outra forma para implementar integrações assíncronas é através da adoção de meios de comunicação orientados a eventos.
Nesta forma, os componentes são classificados em produtores de eventos e processadores de eventos.
Uma aplicação no servidor pode assumir o papel de produtor de eventos que são de interesse de aplicações clientes.
É comum a presença de um servidor de mensagens em comunicações orientadas a eventos.
De forma geral, servidores de mensagens são capazes de oferecer duas formas de comunicação: filas e tópicos.
Filas implementam o padrão ponto-a-ponto de entrega de mensagens para um único consumidor.
Em caso de haver vários consumidores registrados em uma mesma fila, a mensagem só será entregue para um deles.
Tópicos implementam o padrão /Publish-Subscribe/ que permite o envio de uma mesma mensagem para vários consumidores diferentes.


* Conclusão
Este artigo apresentou as duas principais formas de integração entre aplicativos e servidor: integração síncrona e assíncrona.
Os dois modelos de integração de aplicações possuem vantagens e desvantagens. 
É fundamental a escolha adequada para cada tipo de integração.
A escolha deve ser baseada nos requisitos das aplicações, formas de utilização, domínio do problema, frequência entre as trocas de mensagens e tipos de dispositivos utilizados, dentre outros.

Na integração síncrona, a comunicação é encerrada quando o servidor responde a uma requisição do cliente.
Esta forma de integração é geralmente implementada através de serviços REST ou SOAP.
Uma importante vantagem de REST sobre SOAP é que o protocolo auxilia o cliente a compreender a troca de mensagens ao incorporar corretamente códigos de status, formato de dados negociados e semântica de verbos.
Serviços SOAP envelopam toda a informação em uma estrutura de dados representada em XML.
Além da resposta do serviço, o envelope SOAP contém as informações sobre o sucesso ou fracasso da requisição.
Dessa forma, o cliente não possui nenhuma informação sobre a resposta enquanto não processar completamente o envelope recebido.
Além disso, serviços REST permitem a representação dos dados em diferentes formatos.
Clientes e servidores REST podem negociar a representação de dados mais adequada, enquanto servidores SOAP utilizam apenas XML.

Na integração assíncrona, o canal de comunicação entre cliente e servidor permanece aberto, permitindo a troca de mensagens de forma bidirecional.
Web Sockets, filas e tópicos podem ser utilizados para implementar integrações assíncronas.
A integração assíncrona de aplicações permite que clientes realizem atualizações dinâmica de conteúdo, sem a necessidade de bombardear o servidor com requisições e ao mesmo tempo proporcionar melhor experiencia com o usuário.
No cenário onde as aplicações clientes são executadas em dispositivos móveis, 
a comunicação assíncrona pode maximizar a utilização de recursos, uma vez que tais dispositivos possuem limitação de bateria, processamento e uso de rede.
No caso de dispositivos sensores, a integração assíncrona pode otimizar o fluxo de requisições realizadas e recebidas, uma vez que a comunicação pode influenciar o funcionamento e o resultado de medições de variáveis de ambiente.
Por fim, filas podem ser utilizadas para balancear a carga entre os componentes de uma integração de aplicações, em especial num cenário de diversos sensores espalhados em ampla área geográfica.



