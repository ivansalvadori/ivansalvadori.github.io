#+INFOJS_OPT: path:../../HtmlTemplate/ccReport.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../HtmlTemplate/ccReport.css" />
#+TITLE: Microservices in Practice, Part 1: Reality Check and Service Design
#+DATE: 2017-02-04
#+HTML_HEAD: <meta name="docClass" content= "Review">

Pautasso, C., Zimmermann, O., Amundsen, M., Lewis, J., & Josuttis, N. (2017). Microservices in Practice, Part 1: Reality Check and Service Design. IEEE Software, 34(1), 91–98. http://doi.org/10.1109/MS.2017.24

* DONE Overview
  CLOSED: [2017-01-31 Ter 07:53]

This article describes some important aspects of microservices based on specialists point of view.

Firstly, it is discussed microservices definition. One possible definition takes into consideration architectural properties and domain requirements resulting in interaction constraints. Another way to think about microservices is that they are a special approach for SOA, which place all business intelligence and data transformation at the endpoints.
Hence, microservices could be seen as a substyle refining SOA with additional constraints, for instance, less emphasis on central components (ESB or central service choreography). An interesting definition states that microservices are an approach to developing a single application as a suite of small services.  It is also discussed some XP practices, such as test-driven development and continuous integration. Hence, RESTful integration DDD and XP represent complementary practices to consider when building up microservices.

Secondly, questions about domain applications and technologies are addressed. According to the authors, in cases where we have a huge domain, microservices may be adopted successfully. Furthermore, both ubiquitous language and approaches that allow the screen design to evolve without the need for any change in code have been adopted in real implementations.  According to the authors, microservices have some principles, such as no intelligence in the service bus, no distributed transactions, and business-driven service design. In this direction, microservices should focus on business goals.

The third aspect addresses SOA analysis and design. An important thing to consider is not to split out a monolithic application into several microservices if there is no need for that. However, in cases where decomposing the monolith makes sense, it is suggested to start decomposing considering the business process and not only the domain. According to the authors, keeping the focus on interface agreement instead of code-centric objects are a better idea for designing microservices. In addition, the use of standards message models such as HTML, ATOM, HAL, Siren, etc - which allow representing hypermedia - are considered best practices. Finally, the authors state that SOA is not a project but a strategy. Hence, there is no end and cross-domain requirements are becoming part of the new culture.



* DONE Comments
  CLOSED: [2017-01-31 Ter 07:53]

An aspect usually used to define microservices is the focus on business goals. However, in my point of view, the specific business process reduces the level of reusability, since even process fit better-predefined expectations of a given domain. Another aspect I consider important is the separation between services that execute specific functions and services that managed the life cycle of information. Research works do not pay attention to that properly. However, this matter is always present. for instance, in this article quote "Why can’t we have just one service delivering all customer data?"

The use of semantics is not considered in this article. This has to do with microservice compositions that were not addressed either. However, the adoption of a ubiquitous language may be associated with the use of an ontology for describing the application domains involved in a given microservice application.
